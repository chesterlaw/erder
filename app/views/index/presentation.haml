.presentation
  %h1.title
    - 'erder'.split('').each do |character|
      = render :file => "index/#{character}"

  .presentation__paragraphs
    %p With Erder, I primarily wanted to create a geometric typeface that was unarbitrary. I wanted to see what would result from a typeface that had as few design decisions as possible, and the choices that had to be made, were done in the spirit of, "Well, of course it had to be this way!"
    %p I would describe Erder as a geometric, unarbitrary, and therefore grid-based typeface.
    %p Erder is implemented in HTML and CSS, because I'm most familiar with these technologies and SCSS variables allow auto-scaling the thickness of strokes. Unfortunately, this also means Erder is not available to download as a TTF for normal use and currently only serves as a visual experiment.

  .character-group.character-group--capitals
    - ('a'..'z').each do |character|
      .character-group__character= render :file => "index/#{character}"

  .character-group.character-group--lowercase-letters
    - ('a'..'z').each do |character|
      .character-group__character= render :file => "index/lowercase_#{character}"

  .character-group.character-group--numbers
    - (0..9).each do |character|
      .character-group__character= render :file => "index/#{character}"

  .character-group.character-group--special-characters
    - @special_characters.each do |character|
      .character-group__character= render :file => "index/#{character}"
